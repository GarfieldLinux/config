#test for github commit 
#show  port information 
netstat -nutlp | grep 8080 
#show all ports information 
netstat -nutlp
#find the large file 
find . -type f -size +1000000k 
#ssh 443 port forward 
 ssh -o ServerAliveInterval=60 -i ./pem_file.pem -p 4222 pxie@vmw-sz.gopivotal.com -L 443:10.110.112.216:443 

#踢出已经登陆的用户
pkill -kill -t pts/0


#ffmpeg
ffmpeg -i /var/www/html/19uK7fc_1432122398387_75r8hLB_2.mp4  2>&1 | grep Duration | cut -d ' ' -f 4 | sed s/,//

#vimrc 
#
#显示行号
set number
#显示当前编辑的文件名  
highlight StatusLine cterm=bold ctermfg=yellow ctermbg=blue
#以只读模式打开文件file.c 并且光标停留在指定12行 
vim  +12  -M file.c 
#查找
n 查找下一个
N 查找上一个
#以二进制的方式查看一个文件
vim -b file
# xxd 把这个文件转换成十六进制
:%!xxd
#Vim 把这些信息当作普通文本来对待。
#修改了十六进制部分并不导致可显示字符部分的改变，反之亦然。
# 最后，用下面的命令把它转换回来:
:%!xxd -r
#只有十六进制部分的修改才会被采用。右边可显示文本部分的修改忽略不计。

#每行行首添加A
ESC 进入普通模式，然后
:%s/^/A/

#每行末尾增加A
:%s/.*\S.*$/&A/g
:%s/.*\S.*$/&A/g

#删除包含特定字符的行数据
:g/testdelstr/d

#全局替换不可见字符为A
:'<,'>s/\s/A/g

#向下搜索
/keywords

#向上搜索
?keywords

#向下下一个
Ctrl+n

#向上下一个
Ctrl+N

#取消高亮
:nohl




#mysql user root 
[mysqld] 
skip-grant-tables 
***restart mysql 
mysql 
USE mysql ;
UPDATE user SET Password = password ( 'new-password' ) WHERE User = 'root' ; 


[github]
#Fetching a remote
#for more information click link "https://help.github.com/articles/fetching-a-remote/"
##git clone a repo
git clone https://github.com/USERNAME/REPOSITORY.git
#git check your origin push/fetch source
git remote -v
#git add  push/fetch source 
git remote add  (push/fetch name) (git@github.com:username/repo.git)
#git check your origin push/fetch source again
git remote -v
#git fetch remote source code 
git fetch (push/fetch name)
#merge the code 
git merge (push/fetch name)/master 
#git push code (your repo)
git push  

#git 获取代码  不包含.git
gti archive -format zip -output  master.zip master 



[apache traffic server]
Via code 
traffic_line -s  proxy.config.http.insert_request_via_str -v 1
traffic_line -s  proxy.config.http.insert_response_via_str -v 2
traffic_line -x

配置ats在源服务器没有定义缓存的情况缓存文件
traffic_line -s proxy.config.http.cache.required_headers -v 0
traffic_line -x


[nginx cache]
proxy_cache:
nginx通过指令proxy_cache_use_stale来控制在文件过期更新过程的回源请求量，让当一个请求在更新文件时，其他请求则暂时使用过期文件。具体配置为proxy_cache_use_stale updating;

cache_purge:




#查看进程精确的时间 进程ID 4435
ps -eo pid,lstart|grep 4435




#转码
iconv  -f  gbk   -t UTF-8   src/gnts_logwatch.cpp      -o  gnts_logwatch.cpp



#ffmpeg 工具使用 将input_file.mp4 文件 从10s 处开始切分出 15 s 的片段 
ffmpeg -ss 00:00:10 -i input_file.mp4 -vcodec copy -acodec copy -t 00:00:15 cool.mp4



#SHELL 批量删除大量小文件
find / -name *.tar.gz  | xargs rm -f


#进程 线程cpu% 调试方法
ps aux  | grep  processname
pstack  pid 
ps  -eLo pid,lwp,pcpu | grep  pid 
可以找出进程中 哪个线程的哪个函数 占用 cpu 较高 
 
 //清除linux cached 内存
echo 1 > /proc/sys/vm/drop_caches 


