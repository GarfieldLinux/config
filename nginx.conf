#user  nobody;
worker_processes  2;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;

events {
    worker_connections  1024;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;
  
     proxy_ignore_headers "Cache-Control";
     proxy_ignore_headers "Expires";
     proxy_ignore_headers "X-Accel-Buffering";
     proxy_hide_header    "Cache-Control";
     proxy_hide_header    "Expires";
 
     proxy_cache_path /cache01 levels=1:2 keys_zone=Cache01:100m inactive=5m max_size=1000m;
     proxy_cache_path /cache02 levels=1:2 keys_zone=Cache02:100m inactive=5m max_size=1000m;
     proxy_cache_path /cache03 levels=1:2 keys_zone=Cache03:100m inactive=5m max_size=1000m;
     #inactive=5m  5min 清除cache的文件
     #keys_zone 每个cache使用的内存缓存 
     #max_size 每个cache 可用的最大缓存空间
     #proxy_cache_path 缓存的目录 可以每个目录指定为一块物理硬盘
     #levels hash后 目录字节数
     #

     upstream backend {
         server 192.168.10.139:80;
     }
 
     add_header X-Cache "$upstream_cache_status from VM-TEST-NT-140";

    server {
        listen       80;
        server_name  nt-test-140;

        #charset koi8-r;
        #access_log  logs/host.access.log  main;

        location  /1/ {
             rewrite ^/[0-9]+/([^/]+)/(.*)$ /$2 break;
             flv;
             limit_rate 40k;
             proxy_cache_lock on;
             proxy_cache_lock_timeout 5s;
 
             proxy_cache Cache01;
             proxy_temp_path /cache01/temp_cache/;
             proxy_cache_key  $uri;
             proxy_cache_valid 200 206 1h;
             proxy_cache_valid any 1m;
#             proxy_cache_purge PURGE from 192.168.1.129;
 
             proxy_set_header HOST $1;
             proxy_set_header Via  "Dnion Cache - Nt-Test -140";
             proxy_set_header X-Forwarded-For $remote_addr;
             proxy_pass http://backend;

        }

        location  /2/ {
             rewrite ^/[0-9]+/([^/]+)/(.*)$ /$2 break;
             flv;
             limit_rate 40k;
             proxy_cache_lock on;
             proxy_cache_lock_timeout 5s;
 
             proxy_cache Cache02;
             proxy_temp_path /cache02/temp_cache/;
             proxy_cache_key  $uri;
             proxy_cache_valid 200 206 1h;
             proxy_cache_valid any 1m;
#             proxy_cache_purge PURGE from 192.168.1.129;
 
             proxy_set_header HOST $1;
             proxy_set_header Via  "Dnion Cache - Nt-Test -140";
             proxy_set_header X-Forwarded-For $remote_addr;
             proxy_pass http://backend;

        }

        location  /3/ {
             rewrite ^/[0-9]+/([^/]+)/(.*)$ /$2 break;
             flv;
             limit_rate 40k;
             proxy_cache_lock on;
             proxy_cache_lock_timeout 5s;
 
             proxy_cache Cache03;
             proxy_temp_path /cache01/temp_cache/;
             proxy_cache_key  $uri;
             proxy_cache_valid 200 206 1h;
             proxy_cache_valid any 1m;
#             proxy_cache_purge PURGE from 192.168.1.129;
 
             proxy_set_header HOST $1;
             proxy_set_header Via  "Dnion Cache - Nt-Test -140";
             proxy_set_header X-Forwarded-For $remote_addr;
             proxy_pass http://backend;

        }

	location ~ /purge(/.*) {
		#允许的IP
		allow 127.0.0.1;
		#10网段的都可以访问
		allow 192.168.10.0/24;
		deny all;
		#其他的禁止访问
		proxy_cache_purge Cache01 $host$1$is_args$args;
	}

        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }

    }
}
